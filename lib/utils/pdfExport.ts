import { jsPDF } from 'jspdf'
import { SentimentResponse, CapabilityResponse, HeatmapCell, CapabilityDimension } from '@/lib/types'
import { calculateSentimentHeatmap, calculateCapabilityDimensions } from './calculations'
import { DEMO_INTERVENTIONS } from '@/lib/constants'

interface ExportData {
  companyName: string
  sentimentData: SentimentResponse[]
  capabilityData: CapabilityResponse[]
  selectedFlow: 'sentiment' | 'capability'
  selectedIntervention?: string
  filters?: any
}

export async function generatePDF(data: ExportData): Promise<void> {
  const doc = new jsPDF('p', 'mm', 'a4')
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  let yPos = 20

  // Helper function to add new page if needed
  const checkPageBreak = (neededSpace: number) => {
    if (yPos + neededSpace > pageHeight - 20) {
      doc.addPage()
      yPos = 20
      return true
    }
    return false
  }

  // Helper function to add section header
  const addSectionHeader = (title: string) => {
    checkPageBreak(15)
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(20, 184, 166) // teal
    doc.text(title, 20, yPos)
    yPos += 8
  }

  // ========== COVER PAGE ==========
  // Logo/Title
  doc.setFontSize(28)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(20, 184, 166)
  doc.text('AI Navigator', pageWidth / 2, 50, { align: 'center' })

  doc.setFontSize(16)
  doc.setTextColor(100, 100, 100)
  doc.text('AI Readiness Assessment Report', pageWidth / 2, 60, { align: 'center' })

  // Company Name
  doc.setFontSize(20)
  doc.setTextColor(0, 0, 0)
  doc.text(data.companyName || 'Demo Organization', pageWidth / 2, 80, { align: 'center' })

  // Date
  doc.setFontSize(12)
  doc.setTextColor(120, 120, 120)
  const date = new Date().toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  })
  doc.text(date, pageWidth / 2, 90, { align: 'center' })

  // Add decorative box
  doc.setDrawColor(20, 184, 166)
  doc.setLineWidth(0.5)
  doc.rect(30, 110, pageWidth - 60, 60, 'S')
  
  doc.setFontSize(11)
  doc.setTextColor(60, 60, 60)
  const introText = [
    'This report provides a comprehensive overview of your organization\'s',
    'AI readiness based on sentiment analysis and capability assessment.',
    '',
    'Generated by AI Navigator'
  ]
  let textY = 120
  introText.forEach(line => {
    doc.text(line, pageWidth / 2, textY, { align: 'center' })
    textY += 6
  })

  // Add page number
  doc.setFontSize(10)
  doc.setTextColor(150, 150, 150)
  doc.text('Page 1', pageWidth / 2, pageHeight - 10, { align: 'center' })

  // ========== PAGE 2: EXECUTIVE SUMMARY ==========
  doc.addPage()
  yPos = 20

  doc.setFontSize(20)
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(0, 0, 0)
  doc.text('Executive Summary', 20, yPos)
  yPos += 15

  // Overall Statistics
  addSectionHeader('Key Metrics')
  doc.setFontSize(11)
  doc.setFont('helvetica', 'normal')
  doc.setTextColor(60, 60, 60)

  const totalResponses = data.sentimentData.length + data.capabilityData.length
  doc.text(`Total Survey Responses: ${totalResponses}`, 25, yPos)
  yPos += 7
  doc.text(`Assessment Date: ${date}`, 25, yPos)
  yPos += 7
  
  if (data.filters && Object.keys(data.filters).length > 0) {
    doc.text('Filters Applied:', 25, yPos)
    yPos += 7
    Object.entries(data.filters).forEach(([key, value]) => {
      if (value) {
        doc.text(`  • ${key}: ${value}`, 30, yPos)
        yPos += 6
      }
    })
  }
  yPos += 10

  // ========== SENTIMENT ANALYSIS ==========
  if (data.sentimentData.length > 0) {
    checkPageBreak(40)
    addSectionHeader('Sentiment Analysis Overview')
    
    const heatmapData = calculateSentimentHeatmap(data.sentimentData as SentimentResponse[], data.filters)
    const avgSentiment = heatmapData.reduce((sum, cell) => sum + (cell.value * cell.count), 0) / 
                        heatmapData.reduce((sum, cell) => sum + cell.count, 0)
    
    doc.setFontSize(11)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(60, 60, 60)
    doc.text(`Overall Sentiment Score: ${avgSentiment.toFixed(2)}/5.0`, 25, yPos)
    yPos += 10

    // Top concerns
    const topConcerns = heatmapData
      .filter(cell => cell.count > 0 && cell.value < 3)
      .sort((a, b) => a.value - b.value)
      .slice(0, 3)

    if (topConcerns.length > 0) {
      doc.setFont('helvetica', 'bold')
      doc.text('Top Areas of Concern:', 25, yPos)
      yPos += 7
      doc.setFont('helvetica', 'normal')
      
      topConcerns.forEach((concern, idx) => {
        checkPageBreak(12)
        doc.text(`${idx + 1}. ${concern.label} (Score: ${concern.value.toFixed(1)})`, 30, yPos)
        yPos += 6
        const wrappedDesc = doc.splitTextToSize(concern.description, pageWidth - 70)
        doc.setFontSize(10)
        doc.setTextColor(100, 100, 100)
        doc.text(wrappedDesc, 35, yPos)
        yPos += wrappedDesc.length * 5 + 4
        doc.setFontSize(11)
        doc.setTextColor(60, 60, 60)
      })
    }
    yPos += 10
  }

  // ========== CAPABILITY ANALYSIS ==========
  if (data.capabilityData.length > 0) {
    checkPageBreak(40)
    addSectionHeader('Capability Assessment Overview')
    
    const dimensions = calculateCapabilityDimensions(data.capabilityData as CapabilityResponse[], data.filters)
    const avgCapability = dimensions.reduce((sum, d) => sum + d.averageScore, 0) / dimensions.length
    
    doc.setFontSize(11)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(60, 60, 60)
    doc.text(`Overall Capability Maturity: ${avgCapability.toFixed(2)}/5.0`, 25, yPos)
    yPos += 10

    // Dimension breakdown
    doc.setFont('helvetica', 'bold')
    doc.text('Dimension Scores:', 25, yPos)
    yPos += 7
    doc.setFont('helvetica', 'normal')

    dimensions.forEach(dim => {
      checkPageBreak(8)
      const scoreColor: [number, number, number] = dim.averageScore >= 3.5 
        ? [34, 197, 94] 
        : dim.averageScore >= 2.5 
        ? [251, 191, 36] 
        : [239, 68, 68]
      doc.setTextColor(60, 60, 60)
      doc.text(`${dim.name}:`, 30, yPos)
      doc.setTextColor(scoreColor[0], scoreColor[1], scoreColor[2])
      doc.text(`${dim.averageScore.toFixed(2)}`, 120, yPos)
      
      // Progress bar
      const barWidth = 60
      const barHeight = 3
      const barX = 135
      const barY = yPos - 3
      doc.setFillColor(220, 220, 220)
      doc.rect(barX, barY, barWidth, barHeight, 'F')
      doc.setFillColor(scoreColor[0], scoreColor[1], scoreColor[2])
      doc.rect(barX, barY, (dim.averageScore / 5) * barWidth, barHeight, 'F')
      
      yPos += 8
    })
    yPos += 10
  }

  // ========== RECOMMENDED INTERVENTION ==========
  if (data.selectedIntervention) {
    const intervention = DEMO_INTERVENTIONS.find(i => i.id === data.selectedIntervention)
    if (intervention) {
      checkPageBreak(50)
      doc.addPage()
      yPos = 20
      
      addSectionHeader('Recommended Intervention')
      
      doc.setFontSize(16)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(0, 0, 0)
      doc.text(intervention.title, 25, yPos)
      yPos += 10
      
      doc.setFontSize(11)
      doc.setFont('helvetica', 'italic')
      doc.setTextColor(100, 100, 100)
      const wrappedDesc = doc.splitTextToSize(intervention.description, pageWidth - 50)
      doc.text(wrappedDesc, 25, yPos)
      yPos += wrappedDesc.length * 6 + 8
      
      // Implementation details
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(60, 60, 60)
      doc.text('Implementation Details:', 25, yPos)
      yPos += 7
      doc.setFont('helvetica', 'normal')
      
      doc.text(`Duration: ${intervention.implementation.duration}`, 30, yPos)
      yPos += 6
      doc.text(`Difficulty: ${intervention.implementation.difficulty}`, 30, yPos)
      yPos += 6
      doc.text(`Priority: ${intervention.priority}`, 30, yPos)
      yPos += 10
      
      // ROI Estimate
      checkPageBreak(25)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(20, 184, 166)
      doc.text('Expected ROI Impact:', 25, yPos)
      yPos += 7
      doc.setFontSize(20)
      doc.text(`${intervention.roiEstimate.min}-${intervention.roiEstimate.max}%`, 30, yPos)
      yPos += 8
      doc.setFontSize(11)
      doc.setFont('helvetica', 'normal')
      doc.setTextColor(100, 100, 100)
      doc.text(intervention.roiEstimate.description, 30, yPos)
      yPos += 10
      
      // Required Resources
      checkPageBreak(30)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(60, 60, 60)
      doc.text('Required Resources:', 25, yPos)
      yPos += 7
      doc.setFont('helvetica', 'normal')
      
      intervention.implementation.resources.forEach(resource => {
        checkPageBreak(6)
        doc.text(`• ${resource}`, 30, yPos)
        yPos += 6
      })
    }
  }

  // ========== FOOTER ON LAST PAGE ==========
  const totalPages = doc.internal.pages.length - 1 // Subtract 1 for the internal page
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i)
    doc.setFontSize(10)
    doc.setTextColor(150, 150, 150)
    doc.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' })
    doc.text('Generated by AI Navigator', pageWidth - 20, pageHeight - 10, { align: 'right' })
  }

  // Save the PDF
  const filename = `AI-Navigator-Report-${data.companyName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`
  doc.save(filename)
}

